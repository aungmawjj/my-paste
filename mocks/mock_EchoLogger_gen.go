// Code generated by mockery v2.40.1. DO NOT EDIT.

package mpmocks

import (
	io "io"

	log "github.com/labstack/gommon/log"
	mock "github.com/stretchr/testify/mock"
)

// MockEchoLogger is an autogenerated mock type for the EchoLogger type
type MockEchoLogger struct {
	mock.Mock
}

type MockEchoLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEchoLogger) EXPECT() *MockEchoLogger_Expecter {
	return &MockEchoLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: i
func (_m *MockEchoLogger) Debug(i ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, i...)
	_m.Called(_ca...)
}

// MockEchoLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockEchoLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - i ...interface{}
func (_e *MockEchoLogger_Expecter) Debug(i ...interface{}) *MockEchoLogger_Debug_Call {
	return &MockEchoLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{}, i...)...)}
}

func (_c *MockEchoLogger_Debug_Call) Run(run func(i ...interface{})) *MockEchoLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEchoLogger_Debug_Call) Return() *MockEchoLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Debug_Call) RunAndReturn(run func(...interface{})) *MockEchoLogger_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Debugf provides a mock function with given fields: format, args
func (_m *MockEchoLogger) Debugf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEchoLogger_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type MockEchoLogger_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEchoLogger_Expecter) Debugf(format interface{}, args ...interface{}) *MockEchoLogger_Debugf_Call {
	return &MockEchoLogger_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEchoLogger_Debugf_Call) Run(run func(format string, args ...interface{})) *MockEchoLogger_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoLogger_Debugf_Call) Return() *MockEchoLogger_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Debugf_Call) RunAndReturn(run func(string, ...interface{})) *MockEchoLogger_Debugf_Call {
	_c.Call.Return(run)
	return _c
}

// Debugj provides a mock function with given fields: j
func (_m *MockEchoLogger) Debugj(j log.JSON) {
	_m.Called(j)
}

// MockEchoLogger_Debugj_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugj'
type MockEchoLogger_Debugj_Call struct {
	*mock.Call
}

// Debugj is a helper method to define mock.On call
//   - j log.JSON
func (_e *MockEchoLogger_Expecter) Debugj(j interface{}) *MockEchoLogger_Debugj_Call {
	return &MockEchoLogger_Debugj_Call{Call: _e.mock.On("Debugj", j)}
}

func (_c *MockEchoLogger_Debugj_Call) Run(run func(j log.JSON)) *MockEchoLogger_Debugj_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(log.JSON))
	})
	return _c
}

func (_c *MockEchoLogger_Debugj_Call) Return() *MockEchoLogger_Debugj_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Debugj_Call) RunAndReturn(run func(log.JSON)) *MockEchoLogger_Debugj_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: i
func (_m *MockEchoLogger) Error(i ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, i...)
	_m.Called(_ca...)
}

// MockEchoLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockEchoLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - i ...interface{}
func (_e *MockEchoLogger_Expecter) Error(i ...interface{}) *MockEchoLogger_Error_Call {
	return &MockEchoLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{}, i...)...)}
}

func (_c *MockEchoLogger_Error_Call) Run(run func(i ...interface{})) *MockEchoLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEchoLogger_Error_Call) Return() *MockEchoLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Error_Call) RunAndReturn(run func(...interface{})) *MockEchoLogger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Errorf provides a mock function with given fields: format, args
func (_m *MockEchoLogger) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEchoLogger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type MockEchoLogger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEchoLogger_Expecter) Errorf(format interface{}, args ...interface{}) *MockEchoLogger_Errorf_Call {
	return &MockEchoLogger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEchoLogger_Errorf_Call) Run(run func(format string, args ...interface{})) *MockEchoLogger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoLogger_Errorf_Call) Return() *MockEchoLogger_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Errorf_Call) RunAndReturn(run func(string, ...interface{})) *MockEchoLogger_Errorf_Call {
	_c.Call.Return(run)
	return _c
}

// Errorj provides a mock function with given fields: j
func (_m *MockEchoLogger) Errorj(j log.JSON) {
	_m.Called(j)
}

// MockEchoLogger_Errorj_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorj'
type MockEchoLogger_Errorj_Call struct {
	*mock.Call
}

// Errorj is a helper method to define mock.On call
//   - j log.JSON
func (_e *MockEchoLogger_Expecter) Errorj(j interface{}) *MockEchoLogger_Errorj_Call {
	return &MockEchoLogger_Errorj_Call{Call: _e.mock.On("Errorj", j)}
}

func (_c *MockEchoLogger_Errorj_Call) Run(run func(j log.JSON)) *MockEchoLogger_Errorj_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(log.JSON))
	})
	return _c
}

func (_c *MockEchoLogger_Errorj_Call) Return() *MockEchoLogger_Errorj_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Errorj_Call) RunAndReturn(run func(log.JSON)) *MockEchoLogger_Errorj_Call {
	_c.Call.Return(run)
	return _c
}

// Fatal provides a mock function with given fields: i
func (_m *MockEchoLogger) Fatal(i ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, i...)
	_m.Called(_ca...)
}

// MockEchoLogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type MockEchoLogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - i ...interface{}
func (_e *MockEchoLogger_Expecter) Fatal(i ...interface{}) *MockEchoLogger_Fatal_Call {
	return &MockEchoLogger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{}, i...)...)}
}

func (_c *MockEchoLogger_Fatal_Call) Run(run func(i ...interface{})) *MockEchoLogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEchoLogger_Fatal_Call) Return() *MockEchoLogger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Fatal_Call) RunAndReturn(run func(...interface{})) *MockEchoLogger_Fatal_Call {
	_c.Call.Return(run)
	return _c
}

// Fatalf provides a mock function with given fields: format, args
func (_m *MockEchoLogger) Fatalf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEchoLogger_Fatalf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalf'
type MockEchoLogger_Fatalf_Call struct {
	*mock.Call
}

// Fatalf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEchoLogger_Expecter) Fatalf(format interface{}, args ...interface{}) *MockEchoLogger_Fatalf_Call {
	return &MockEchoLogger_Fatalf_Call{Call: _e.mock.On("Fatalf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEchoLogger_Fatalf_Call) Run(run func(format string, args ...interface{})) *MockEchoLogger_Fatalf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoLogger_Fatalf_Call) Return() *MockEchoLogger_Fatalf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Fatalf_Call) RunAndReturn(run func(string, ...interface{})) *MockEchoLogger_Fatalf_Call {
	_c.Call.Return(run)
	return _c
}

// Fatalj provides a mock function with given fields: j
func (_m *MockEchoLogger) Fatalj(j log.JSON) {
	_m.Called(j)
}

// MockEchoLogger_Fatalj_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalj'
type MockEchoLogger_Fatalj_Call struct {
	*mock.Call
}

// Fatalj is a helper method to define mock.On call
//   - j log.JSON
func (_e *MockEchoLogger_Expecter) Fatalj(j interface{}) *MockEchoLogger_Fatalj_Call {
	return &MockEchoLogger_Fatalj_Call{Call: _e.mock.On("Fatalj", j)}
}

func (_c *MockEchoLogger_Fatalj_Call) Run(run func(j log.JSON)) *MockEchoLogger_Fatalj_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(log.JSON))
	})
	return _c
}

func (_c *MockEchoLogger_Fatalj_Call) Return() *MockEchoLogger_Fatalj_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Fatalj_Call) RunAndReturn(run func(log.JSON)) *MockEchoLogger_Fatalj_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: i
func (_m *MockEchoLogger) Info(i ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, i...)
	_m.Called(_ca...)
}

// MockEchoLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockEchoLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - i ...interface{}
func (_e *MockEchoLogger_Expecter) Info(i ...interface{}) *MockEchoLogger_Info_Call {
	return &MockEchoLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{}, i...)...)}
}

func (_c *MockEchoLogger_Info_Call) Run(run func(i ...interface{})) *MockEchoLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEchoLogger_Info_Call) Return() *MockEchoLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Info_Call) RunAndReturn(run func(...interface{})) *MockEchoLogger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Infof provides a mock function with given fields: format, args
func (_m *MockEchoLogger) Infof(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEchoLogger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type MockEchoLogger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEchoLogger_Expecter) Infof(format interface{}, args ...interface{}) *MockEchoLogger_Infof_Call {
	return &MockEchoLogger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEchoLogger_Infof_Call) Run(run func(format string, args ...interface{})) *MockEchoLogger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoLogger_Infof_Call) Return() *MockEchoLogger_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Infof_Call) RunAndReturn(run func(string, ...interface{})) *MockEchoLogger_Infof_Call {
	_c.Call.Return(run)
	return _c
}

// Infoj provides a mock function with given fields: j
func (_m *MockEchoLogger) Infoj(j log.JSON) {
	_m.Called(j)
}

// MockEchoLogger_Infoj_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infoj'
type MockEchoLogger_Infoj_Call struct {
	*mock.Call
}

// Infoj is a helper method to define mock.On call
//   - j log.JSON
func (_e *MockEchoLogger_Expecter) Infoj(j interface{}) *MockEchoLogger_Infoj_Call {
	return &MockEchoLogger_Infoj_Call{Call: _e.mock.On("Infoj", j)}
}

func (_c *MockEchoLogger_Infoj_Call) Run(run func(j log.JSON)) *MockEchoLogger_Infoj_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(log.JSON))
	})
	return _c
}

func (_c *MockEchoLogger_Infoj_Call) Return() *MockEchoLogger_Infoj_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Infoj_Call) RunAndReturn(run func(log.JSON)) *MockEchoLogger_Infoj_Call {
	_c.Call.Return(run)
	return _c
}

// Level provides a mock function with given fields:
func (_m *MockEchoLogger) Level() log.Lvl {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Level")
	}

	var r0 log.Lvl
	if rf, ok := ret.Get(0).(func() log.Lvl); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(log.Lvl)
	}

	return r0
}

// MockEchoLogger_Level_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Level'
type MockEchoLogger_Level_Call struct {
	*mock.Call
}

// Level is a helper method to define mock.On call
func (_e *MockEchoLogger_Expecter) Level() *MockEchoLogger_Level_Call {
	return &MockEchoLogger_Level_Call{Call: _e.mock.On("Level")}
}

func (_c *MockEchoLogger_Level_Call) Run(run func()) *MockEchoLogger_Level_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoLogger_Level_Call) Return(_a0 log.Lvl) *MockEchoLogger_Level_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoLogger_Level_Call) RunAndReturn(run func() log.Lvl) *MockEchoLogger_Level_Call {
	_c.Call.Return(run)
	return _c
}

// Output provides a mock function with given fields:
func (_m *MockEchoLogger) Output() io.Writer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Output")
	}

	var r0 io.Writer
	if rf, ok := ret.Get(0).(func() io.Writer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Writer)
		}
	}

	return r0
}

// MockEchoLogger_Output_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Output'
type MockEchoLogger_Output_Call struct {
	*mock.Call
}

// Output is a helper method to define mock.On call
func (_e *MockEchoLogger_Expecter) Output() *MockEchoLogger_Output_Call {
	return &MockEchoLogger_Output_Call{Call: _e.mock.On("Output")}
}

func (_c *MockEchoLogger_Output_Call) Run(run func()) *MockEchoLogger_Output_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoLogger_Output_Call) Return(_a0 io.Writer) *MockEchoLogger_Output_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoLogger_Output_Call) RunAndReturn(run func() io.Writer) *MockEchoLogger_Output_Call {
	_c.Call.Return(run)
	return _c
}

// Panic provides a mock function with given fields: i
func (_m *MockEchoLogger) Panic(i ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, i...)
	_m.Called(_ca...)
}

// MockEchoLogger_Panic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panic'
type MockEchoLogger_Panic_Call struct {
	*mock.Call
}

// Panic is a helper method to define mock.On call
//   - i ...interface{}
func (_e *MockEchoLogger_Expecter) Panic(i ...interface{}) *MockEchoLogger_Panic_Call {
	return &MockEchoLogger_Panic_Call{Call: _e.mock.On("Panic",
		append([]interface{}{}, i...)...)}
}

func (_c *MockEchoLogger_Panic_Call) Run(run func(i ...interface{})) *MockEchoLogger_Panic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEchoLogger_Panic_Call) Return() *MockEchoLogger_Panic_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Panic_Call) RunAndReturn(run func(...interface{})) *MockEchoLogger_Panic_Call {
	_c.Call.Return(run)
	return _c
}

// Panicf provides a mock function with given fields: format, args
func (_m *MockEchoLogger) Panicf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEchoLogger_Panicf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panicf'
type MockEchoLogger_Panicf_Call struct {
	*mock.Call
}

// Panicf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEchoLogger_Expecter) Panicf(format interface{}, args ...interface{}) *MockEchoLogger_Panicf_Call {
	return &MockEchoLogger_Panicf_Call{Call: _e.mock.On("Panicf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEchoLogger_Panicf_Call) Run(run func(format string, args ...interface{})) *MockEchoLogger_Panicf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoLogger_Panicf_Call) Return() *MockEchoLogger_Panicf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Panicf_Call) RunAndReturn(run func(string, ...interface{})) *MockEchoLogger_Panicf_Call {
	_c.Call.Return(run)
	return _c
}

// Panicj provides a mock function with given fields: j
func (_m *MockEchoLogger) Panicj(j log.JSON) {
	_m.Called(j)
}

// MockEchoLogger_Panicj_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panicj'
type MockEchoLogger_Panicj_Call struct {
	*mock.Call
}

// Panicj is a helper method to define mock.On call
//   - j log.JSON
func (_e *MockEchoLogger_Expecter) Panicj(j interface{}) *MockEchoLogger_Panicj_Call {
	return &MockEchoLogger_Panicj_Call{Call: _e.mock.On("Panicj", j)}
}

func (_c *MockEchoLogger_Panicj_Call) Run(run func(j log.JSON)) *MockEchoLogger_Panicj_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(log.JSON))
	})
	return _c
}

func (_c *MockEchoLogger_Panicj_Call) Return() *MockEchoLogger_Panicj_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Panicj_Call) RunAndReturn(run func(log.JSON)) *MockEchoLogger_Panicj_Call {
	_c.Call.Return(run)
	return _c
}

// Prefix provides a mock function with given fields:
func (_m *MockEchoLogger) Prefix() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Prefix")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEchoLogger_Prefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prefix'
type MockEchoLogger_Prefix_Call struct {
	*mock.Call
}

// Prefix is a helper method to define mock.On call
func (_e *MockEchoLogger_Expecter) Prefix() *MockEchoLogger_Prefix_Call {
	return &MockEchoLogger_Prefix_Call{Call: _e.mock.On("Prefix")}
}

func (_c *MockEchoLogger_Prefix_Call) Run(run func()) *MockEchoLogger_Prefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoLogger_Prefix_Call) Return(_a0 string) *MockEchoLogger_Prefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoLogger_Prefix_Call) RunAndReturn(run func() string) *MockEchoLogger_Prefix_Call {
	_c.Call.Return(run)
	return _c
}

// Print provides a mock function with given fields: i
func (_m *MockEchoLogger) Print(i ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, i...)
	_m.Called(_ca...)
}

// MockEchoLogger_Print_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Print'
type MockEchoLogger_Print_Call struct {
	*mock.Call
}

// Print is a helper method to define mock.On call
//   - i ...interface{}
func (_e *MockEchoLogger_Expecter) Print(i ...interface{}) *MockEchoLogger_Print_Call {
	return &MockEchoLogger_Print_Call{Call: _e.mock.On("Print",
		append([]interface{}{}, i...)...)}
}

func (_c *MockEchoLogger_Print_Call) Run(run func(i ...interface{})) *MockEchoLogger_Print_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEchoLogger_Print_Call) Return() *MockEchoLogger_Print_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Print_Call) RunAndReturn(run func(...interface{})) *MockEchoLogger_Print_Call {
	_c.Call.Return(run)
	return _c
}

// Printf provides a mock function with given fields: format, args
func (_m *MockEchoLogger) Printf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEchoLogger_Printf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printf'
type MockEchoLogger_Printf_Call struct {
	*mock.Call
}

// Printf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEchoLogger_Expecter) Printf(format interface{}, args ...interface{}) *MockEchoLogger_Printf_Call {
	return &MockEchoLogger_Printf_Call{Call: _e.mock.On("Printf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEchoLogger_Printf_Call) Run(run func(format string, args ...interface{})) *MockEchoLogger_Printf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoLogger_Printf_Call) Return() *MockEchoLogger_Printf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Printf_Call) RunAndReturn(run func(string, ...interface{})) *MockEchoLogger_Printf_Call {
	_c.Call.Return(run)
	return _c
}

// Printj provides a mock function with given fields: j
func (_m *MockEchoLogger) Printj(j log.JSON) {
	_m.Called(j)
}

// MockEchoLogger_Printj_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printj'
type MockEchoLogger_Printj_Call struct {
	*mock.Call
}

// Printj is a helper method to define mock.On call
//   - j log.JSON
func (_e *MockEchoLogger_Expecter) Printj(j interface{}) *MockEchoLogger_Printj_Call {
	return &MockEchoLogger_Printj_Call{Call: _e.mock.On("Printj", j)}
}

func (_c *MockEchoLogger_Printj_Call) Run(run func(j log.JSON)) *MockEchoLogger_Printj_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(log.JSON))
	})
	return _c
}

func (_c *MockEchoLogger_Printj_Call) Return() *MockEchoLogger_Printj_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Printj_Call) RunAndReturn(run func(log.JSON)) *MockEchoLogger_Printj_Call {
	_c.Call.Return(run)
	return _c
}

// SetHeader provides a mock function with given fields: h
func (_m *MockEchoLogger) SetHeader(h string) {
	_m.Called(h)
}

// MockEchoLogger_SetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeader'
type MockEchoLogger_SetHeader_Call struct {
	*mock.Call
}

// SetHeader is a helper method to define mock.On call
//   - h string
func (_e *MockEchoLogger_Expecter) SetHeader(h interface{}) *MockEchoLogger_SetHeader_Call {
	return &MockEchoLogger_SetHeader_Call{Call: _e.mock.On("SetHeader", h)}
}

func (_c *MockEchoLogger_SetHeader_Call) Run(run func(h string)) *MockEchoLogger_SetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEchoLogger_SetHeader_Call) Return() *MockEchoLogger_SetHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_SetHeader_Call) RunAndReturn(run func(string)) *MockEchoLogger_SetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SetLevel provides a mock function with given fields: v
func (_m *MockEchoLogger) SetLevel(v log.Lvl) {
	_m.Called(v)
}

// MockEchoLogger_SetLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLevel'
type MockEchoLogger_SetLevel_Call struct {
	*mock.Call
}

// SetLevel is a helper method to define mock.On call
//   - v log.Lvl
func (_e *MockEchoLogger_Expecter) SetLevel(v interface{}) *MockEchoLogger_SetLevel_Call {
	return &MockEchoLogger_SetLevel_Call{Call: _e.mock.On("SetLevel", v)}
}

func (_c *MockEchoLogger_SetLevel_Call) Run(run func(v log.Lvl)) *MockEchoLogger_SetLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(log.Lvl))
	})
	return _c
}

func (_c *MockEchoLogger_SetLevel_Call) Return() *MockEchoLogger_SetLevel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_SetLevel_Call) RunAndReturn(run func(log.Lvl)) *MockEchoLogger_SetLevel_Call {
	_c.Call.Return(run)
	return _c
}

// SetOutput provides a mock function with given fields: w
func (_m *MockEchoLogger) SetOutput(w io.Writer) {
	_m.Called(w)
}

// MockEchoLogger_SetOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOutput'
type MockEchoLogger_SetOutput_Call struct {
	*mock.Call
}

// SetOutput is a helper method to define mock.On call
//   - w io.Writer
func (_e *MockEchoLogger_Expecter) SetOutput(w interface{}) *MockEchoLogger_SetOutput_Call {
	return &MockEchoLogger_SetOutput_Call{Call: _e.mock.On("SetOutput", w)}
}

func (_c *MockEchoLogger_SetOutput_Call) Run(run func(w io.Writer)) *MockEchoLogger_SetOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *MockEchoLogger_SetOutput_Call) Return() *MockEchoLogger_SetOutput_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_SetOutput_Call) RunAndReturn(run func(io.Writer)) *MockEchoLogger_SetOutput_Call {
	_c.Call.Return(run)
	return _c
}

// SetPrefix provides a mock function with given fields: p
func (_m *MockEchoLogger) SetPrefix(p string) {
	_m.Called(p)
}

// MockEchoLogger_SetPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPrefix'
type MockEchoLogger_SetPrefix_Call struct {
	*mock.Call
}

// SetPrefix is a helper method to define mock.On call
//   - p string
func (_e *MockEchoLogger_Expecter) SetPrefix(p interface{}) *MockEchoLogger_SetPrefix_Call {
	return &MockEchoLogger_SetPrefix_Call{Call: _e.mock.On("SetPrefix", p)}
}

func (_c *MockEchoLogger_SetPrefix_Call) Run(run func(p string)) *MockEchoLogger_SetPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEchoLogger_SetPrefix_Call) Return() *MockEchoLogger_SetPrefix_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_SetPrefix_Call) RunAndReturn(run func(string)) *MockEchoLogger_SetPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: i
func (_m *MockEchoLogger) Warn(i ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, i...)
	_m.Called(_ca...)
}

// MockEchoLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockEchoLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - i ...interface{}
func (_e *MockEchoLogger_Expecter) Warn(i ...interface{}) *MockEchoLogger_Warn_Call {
	return &MockEchoLogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{}, i...)...)}
}

func (_c *MockEchoLogger_Warn_Call) Run(run func(i ...interface{})) *MockEchoLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEchoLogger_Warn_Call) Return() *MockEchoLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Warn_Call) RunAndReturn(run func(...interface{})) *MockEchoLogger_Warn_Call {
	_c.Call.Return(run)
	return _c
}

// Warnf provides a mock function with given fields: format, args
func (_m *MockEchoLogger) Warnf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockEchoLogger_Warnf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnf'
type MockEchoLogger_Warnf_Call struct {
	*mock.Call
}

// Warnf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockEchoLogger_Expecter) Warnf(format interface{}, args ...interface{}) *MockEchoLogger_Warnf_Call {
	return &MockEchoLogger_Warnf_Call{Call: _e.mock.On("Warnf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockEchoLogger_Warnf_Call) Run(run func(format string, args ...interface{})) *MockEchoLogger_Warnf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockEchoLogger_Warnf_Call) Return() *MockEchoLogger_Warnf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Warnf_Call) RunAndReturn(run func(string, ...interface{})) *MockEchoLogger_Warnf_Call {
	_c.Call.Return(run)
	return _c
}

// Warnj provides a mock function with given fields: j
func (_m *MockEchoLogger) Warnj(j log.JSON) {
	_m.Called(j)
}

// MockEchoLogger_Warnj_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnj'
type MockEchoLogger_Warnj_Call struct {
	*mock.Call
}

// Warnj is a helper method to define mock.On call
//   - j log.JSON
func (_e *MockEchoLogger_Expecter) Warnj(j interface{}) *MockEchoLogger_Warnj_Call {
	return &MockEchoLogger_Warnj_Call{Call: _e.mock.On("Warnj", j)}
}

func (_c *MockEchoLogger_Warnj_Call) Run(run func(j log.JSON)) *MockEchoLogger_Warnj_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(log.JSON))
	})
	return _c
}

func (_c *MockEchoLogger_Warnj_Call) Return() *MockEchoLogger_Warnj_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoLogger_Warnj_Call) RunAndReturn(run func(log.JSON)) *MockEchoLogger_Warnj_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEchoLogger creates a new instance of MockEchoLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEchoLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEchoLogger {
	mock := &MockEchoLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
