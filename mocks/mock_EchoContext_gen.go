// Code generated by mockery v2.40.1. DO NOT EDIT.

package mpmocks

import (
	http "net/http"

	echo "github.com/labstack/echo/v4"

	io "io"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	url "net/url"
)

// MockEchoContext is an autogenerated mock type for the EchoContext type
type MockEchoContext struct {
	mock.Mock
}

type MockEchoContext_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEchoContext) EXPECT() *MockEchoContext_Expecter {
	return &MockEchoContext_Expecter{mock: &_m.Mock}
}

// Attachment provides a mock function with given fields: file, name
func (_m *MockEchoContext) Attachment(file string, name string) error {
	ret := _m.Called(file, name)

	if len(ret) == 0 {
		panic("no return value specified for Attachment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(file, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_Attachment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attachment'
type MockEchoContext_Attachment_Call struct {
	*mock.Call
}

// Attachment is a helper method to define mock.On call
//   - file string
//   - name string
func (_e *MockEchoContext_Expecter) Attachment(file interface{}, name interface{}) *MockEchoContext_Attachment_Call {
	return &MockEchoContext_Attachment_Call{Call: _e.mock.On("Attachment", file, name)}
}

func (_c *MockEchoContext_Attachment_Call) Run(run func(file string, name string)) *MockEchoContext_Attachment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockEchoContext_Attachment_Call) Return(_a0 error) *MockEchoContext_Attachment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Attachment_Call) RunAndReturn(run func(string, string) error) *MockEchoContext_Attachment_Call {
	_c.Call.Return(run)
	return _c
}

// Bind provides a mock function with given fields: i
func (_m *MockEchoContext) Bind(i interface{}) error {
	ret := _m.Called(i)

	if len(ret) == 0 {
		panic("no return value specified for Bind")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type MockEchoContext_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - i interface{}
func (_e *MockEchoContext_Expecter) Bind(i interface{}) *MockEchoContext_Bind_Call {
	return &MockEchoContext_Bind_Call{Call: _e.mock.On("Bind", i)}
}

func (_c *MockEchoContext_Bind_Call) Run(run func(i interface{})) *MockEchoContext_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockEchoContext_Bind_Call) Return(_a0 error) *MockEchoContext_Bind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Bind_Call) RunAndReturn(run func(interface{}) error) *MockEchoContext_Bind_Call {
	_c.Call.Return(run)
	return _c
}

// Blob provides a mock function with given fields: code, contentType, b
func (_m *MockEchoContext) Blob(code int, contentType string, b []byte) error {
	ret := _m.Called(code, contentType, b)

	if len(ret) == 0 {
		panic("no return value specified for Blob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, []byte) error); ok {
		r0 = rf(code, contentType, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_Blob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Blob'
type MockEchoContext_Blob_Call struct {
	*mock.Call
}

// Blob is a helper method to define mock.On call
//   - code int
//   - contentType string
//   - b []byte
func (_e *MockEchoContext_Expecter) Blob(code interface{}, contentType interface{}, b interface{}) *MockEchoContext_Blob_Call {
	return &MockEchoContext_Blob_Call{Call: _e.mock.On("Blob", code, contentType, b)}
}

func (_c *MockEchoContext_Blob_Call) Run(run func(code int, contentType string, b []byte)) *MockEchoContext_Blob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockEchoContext_Blob_Call) Return(_a0 error) *MockEchoContext_Blob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Blob_Call) RunAndReturn(run func(int, string, []byte) error) *MockEchoContext_Blob_Call {
	_c.Call.Return(run)
	return _c
}

// Cookie provides a mock function with given fields: name
func (_m *MockEchoContext) Cookie(name string) (*http.Cookie, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Cookie")
	}

	var r0 *http.Cookie
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*http.Cookie, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *http.Cookie); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Cookie)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEchoContext_Cookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookie'
type MockEchoContext_Cookie_Call struct {
	*mock.Call
}

// Cookie is a helper method to define mock.On call
//   - name string
func (_e *MockEchoContext_Expecter) Cookie(name interface{}) *MockEchoContext_Cookie_Call {
	return &MockEchoContext_Cookie_Call{Call: _e.mock.On("Cookie", name)}
}

func (_c *MockEchoContext_Cookie_Call) Run(run func(name string)) *MockEchoContext_Cookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEchoContext_Cookie_Call) Return(_a0 *http.Cookie, _a1 error) *MockEchoContext_Cookie_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEchoContext_Cookie_Call) RunAndReturn(run func(string) (*http.Cookie, error)) *MockEchoContext_Cookie_Call {
	_c.Call.Return(run)
	return _c
}

// Cookies provides a mock function with given fields:
func (_m *MockEchoContext) Cookies() []*http.Cookie {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cookies")
	}

	var r0 []*http.Cookie
	if rf, ok := ret.Get(0).(func() []*http.Cookie); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*http.Cookie)
		}
	}

	return r0
}

// MockEchoContext_Cookies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookies'
type MockEchoContext_Cookies_Call struct {
	*mock.Call
}

// Cookies is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) Cookies() *MockEchoContext_Cookies_Call {
	return &MockEchoContext_Cookies_Call{Call: _e.mock.On("Cookies")}
}

func (_c *MockEchoContext_Cookies_Call) Run(run func()) *MockEchoContext_Cookies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_Cookies_Call) Return(_a0 []*http.Cookie) *MockEchoContext_Cookies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Cookies_Call) RunAndReturn(run func() []*http.Cookie) *MockEchoContext_Cookies_Call {
	_c.Call.Return(run)
	return _c
}

// Echo provides a mock function with given fields:
func (_m *MockEchoContext) Echo() *echo.Echo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Echo")
	}

	var r0 *echo.Echo
	if rf, ok := ret.Get(0).(func() *echo.Echo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Echo)
		}
	}

	return r0
}

// MockEchoContext_Echo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Echo'
type MockEchoContext_Echo_Call struct {
	*mock.Call
}

// Echo is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) Echo() *MockEchoContext_Echo_Call {
	return &MockEchoContext_Echo_Call{Call: _e.mock.On("Echo")}
}

func (_c *MockEchoContext_Echo_Call) Run(run func()) *MockEchoContext_Echo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_Echo_Call) Return(_a0 *echo.Echo) *MockEchoContext_Echo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Echo_Call) RunAndReturn(run func() *echo.Echo) *MockEchoContext_Echo_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: err
func (_m *MockEchoContext) Error(err error) {
	_m.Called(err)
}

// MockEchoContext_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockEchoContext_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - err error
func (_e *MockEchoContext_Expecter) Error(err interface{}) *MockEchoContext_Error_Call {
	return &MockEchoContext_Error_Call{Call: _e.mock.On("Error", err)}
}

func (_c *MockEchoContext_Error_Call) Run(run func(err error)) *MockEchoContext_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockEchoContext_Error_Call) Return() *MockEchoContext_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoContext_Error_Call) RunAndReturn(run func(error)) *MockEchoContext_Error_Call {
	_c.Call.Return(run)
	return _c
}

// File provides a mock function with given fields: file
func (_m *MockEchoContext) File(file string) error {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for File")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_File_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'File'
type MockEchoContext_File_Call struct {
	*mock.Call
}

// File is a helper method to define mock.On call
//   - file string
func (_e *MockEchoContext_Expecter) File(file interface{}) *MockEchoContext_File_Call {
	return &MockEchoContext_File_Call{Call: _e.mock.On("File", file)}
}

func (_c *MockEchoContext_File_Call) Run(run func(file string)) *MockEchoContext_File_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEchoContext_File_Call) Return(_a0 error) *MockEchoContext_File_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_File_Call) RunAndReturn(run func(string) error) *MockEchoContext_File_Call {
	_c.Call.Return(run)
	return _c
}

// FormFile provides a mock function with given fields: name
func (_m *MockEchoContext) FormFile(name string) (*multipart.FileHeader, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FormFile")
	}

	var r0 *multipart.FileHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*multipart.FileHeader, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *multipart.FileHeader); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.FileHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEchoContext_FormFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormFile'
type MockEchoContext_FormFile_Call struct {
	*mock.Call
}

// FormFile is a helper method to define mock.On call
//   - name string
func (_e *MockEchoContext_Expecter) FormFile(name interface{}) *MockEchoContext_FormFile_Call {
	return &MockEchoContext_FormFile_Call{Call: _e.mock.On("FormFile", name)}
}

func (_c *MockEchoContext_FormFile_Call) Run(run func(name string)) *MockEchoContext_FormFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEchoContext_FormFile_Call) Return(_a0 *multipart.FileHeader, _a1 error) *MockEchoContext_FormFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEchoContext_FormFile_Call) RunAndReturn(run func(string) (*multipart.FileHeader, error)) *MockEchoContext_FormFile_Call {
	_c.Call.Return(run)
	return _c
}

// FormParams provides a mock function with given fields:
func (_m *MockEchoContext) FormParams() (url.Values, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FormParams")
	}

	var r0 url.Values
	var r1 error
	if rf, ok := ret.Get(0).(func() (url.Values, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() url.Values); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(url.Values)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEchoContext_FormParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormParams'
type MockEchoContext_FormParams_Call struct {
	*mock.Call
}

// FormParams is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) FormParams() *MockEchoContext_FormParams_Call {
	return &MockEchoContext_FormParams_Call{Call: _e.mock.On("FormParams")}
}

func (_c *MockEchoContext_FormParams_Call) Run(run func()) *MockEchoContext_FormParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_FormParams_Call) Return(_a0 url.Values, _a1 error) *MockEchoContext_FormParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEchoContext_FormParams_Call) RunAndReturn(run func() (url.Values, error)) *MockEchoContext_FormParams_Call {
	_c.Call.Return(run)
	return _c
}

// FormValue provides a mock function with given fields: name
func (_m *MockEchoContext) FormValue(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FormValue")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEchoContext_FormValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormValue'
type MockEchoContext_FormValue_Call struct {
	*mock.Call
}

// FormValue is a helper method to define mock.On call
//   - name string
func (_e *MockEchoContext_Expecter) FormValue(name interface{}) *MockEchoContext_FormValue_Call {
	return &MockEchoContext_FormValue_Call{Call: _e.mock.On("FormValue", name)}
}

func (_c *MockEchoContext_FormValue_Call) Run(run func(name string)) *MockEchoContext_FormValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEchoContext_FormValue_Call) Return(_a0 string) *MockEchoContext_FormValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_FormValue_Call) RunAndReturn(run func(string) string) *MockEchoContext_FormValue_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockEchoContext) Get(key string) interface{} {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockEchoContext_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockEchoContext_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockEchoContext_Expecter) Get(key interface{}) *MockEchoContext_Get_Call {
	return &MockEchoContext_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockEchoContext_Get_Call) Run(run func(key string)) *MockEchoContext_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEchoContext_Get_Call) Return(_a0 interface{}) *MockEchoContext_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Get_Call) RunAndReturn(run func(string) interface{}) *MockEchoContext_Get_Call {
	_c.Call.Return(run)
	return _c
}

// HTML provides a mock function with given fields: code, html
func (_m *MockEchoContext) HTML(code int, html string) error {
	ret := _m.Called(code, html)

	if len(ret) == 0 {
		panic("no return value specified for HTML")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(code, html)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_HTML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTML'
type MockEchoContext_HTML_Call struct {
	*mock.Call
}

// HTML is a helper method to define mock.On call
//   - code int
//   - html string
func (_e *MockEchoContext_Expecter) HTML(code interface{}, html interface{}) *MockEchoContext_HTML_Call {
	return &MockEchoContext_HTML_Call{Call: _e.mock.On("HTML", code, html)}
}

func (_c *MockEchoContext_HTML_Call) Run(run func(code int, html string)) *MockEchoContext_HTML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockEchoContext_HTML_Call) Return(_a0 error) *MockEchoContext_HTML_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_HTML_Call) RunAndReturn(run func(int, string) error) *MockEchoContext_HTML_Call {
	_c.Call.Return(run)
	return _c
}

// HTMLBlob provides a mock function with given fields: code, b
func (_m *MockEchoContext) HTMLBlob(code int, b []byte) error {
	ret := _m.Called(code, b)

	if len(ret) == 0 {
		panic("no return value specified for HTMLBlob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = rf(code, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_HTMLBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTMLBlob'
type MockEchoContext_HTMLBlob_Call struct {
	*mock.Call
}

// HTMLBlob is a helper method to define mock.On call
//   - code int
//   - b []byte
func (_e *MockEchoContext_Expecter) HTMLBlob(code interface{}, b interface{}) *MockEchoContext_HTMLBlob_Call {
	return &MockEchoContext_HTMLBlob_Call{Call: _e.mock.On("HTMLBlob", code, b)}
}

func (_c *MockEchoContext_HTMLBlob_Call) Run(run func(code int, b []byte)) *MockEchoContext_HTMLBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]byte))
	})
	return _c
}

func (_c *MockEchoContext_HTMLBlob_Call) Return(_a0 error) *MockEchoContext_HTMLBlob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_HTMLBlob_Call) RunAndReturn(run func(int, []byte) error) *MockEchoContext_HTMLBlob_Call {
	_c.Call.Return(run)
	return _c
}

// Handler provides a mock function with given fields:
func (_m *MockEchoContext) Handler() echo.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 echo.HandlerFunc
	if rf, ok := ret.Get(0).(func() echo.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}

	return r0
}

// MockEchoContext_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type MockEchoContext_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) Handler() *MockEchoContext_Handler_Call {
	return &MockEchoContext_Handler_Call{Call: _e.mock.On("Handler")}
}

func (_c *MockEchoContext_Handler_Call) Run(run func()) *MockEchoContext_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_Handler_Call) Return(_a0 echo.HandlerFunc) *MockEchoContext_Handler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Handler_Call) RunAndReturn(run func() echo.HandlerFunc) *MockEchoContext_Handler_Call {
	_c.Call.Return(run)
	return _c
}

// Inline provides a mock function with given fields: file, name
func (_m *MockEchoContext) Inline(file string, name string) error {
	ret := _m.Called(file, name)

	if len(ret) == 0 {
		panic("no return value specified for Inline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(file, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_Inline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inline'
type MockEchoContext_Inline_Call struct {
	*mock.Call
}

// Inline is a helper method to define mock.On call
//   - file string
//   - name string
func (_e *MockEchoContext_Expecter) Inline(file interface{}, name interface{}) *MockEchoContext_Inline_Call {
	return &MockEchoContext_Inline_Call{Call: _e.mock.On("Inline", file, name)}
}

func (_c *MockEchoContext_Inline_Call) Run(run func(file string, name string)) *MockEchoContext_Inline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockEchoContext_Inline_Call) Return(_a0 error) *MockEchoContext_Inline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Inline_Call) RunAndReturn(run func(string, string) error) *MockEchoContext_Inline_Call {
	_c.Call.Return(run)
	return _c
}

// IsTLS provides a mock function with given fields:
func (_m *MockEchoContext) IsTLS() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsTLS")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEchoContext_IsTLS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTLS'
type MockEchoContext_IsTLS_Call struct {
	*mock.Call
}

// IsTLS is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) IsTLS() *MockEchoContext_IsTLS_Call {
	return &MockEchoContext_IsTLS_Call{Call: _e.mock.On("IsTLS")}
}

func (_c *MockEchoContext_IsTLS_Call) Run(run func()) *MockEchoContext_IsTLS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_IsTLS_Call) Return(_a0 bool) *MockEchoContext_IsTLS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_IsTLS_Call) RunAndReturn(run func() bool) *MockEchoContext_IsTLS_Call {
	_c.Call.Return(run)
	return _c
}

// IsWebSocket provides a mock function with given fields:
func (_m *MockEchoContext) IsWebSocket() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsWebSocket")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEchoContext_IsWebSocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsWebSocket'
type MockEchoContext_IsWebSocket_Call struct {
	*mock.Call
}

// IsWebSocket is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) IsWebSocket() *MockEchoContext_IsWebSocket_Call {
	return &MockEchoContext_IsWebSocket_Call{Call: _e.mock.On("IsWebSocket")}
}

func (_c *MockEchoContext_IsWebSocket_Call) Run(run func()) *MockEchoContext_IsWebSocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_IsWebSocket_Call) Return(_a0 bool) *MockEchoContext_IsWebSocket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_IsWebSocket_Call) RunAndReturn(run func() bool) *MockEchoContext_IsWebSocket_Call {
	_c.Call.Return(run)
	return _c
}

// JSON provides a mock function with given fields: code, i
func (_m *MockEchoContext) JSON(code int, i interface{}) error {
	ret := _m.Called(code, i)

	if len(ret) == 0 {
		panic("no return value specified for JSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, interface{}) error); ok {
		r0 = rf(code, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_JSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSON'
type MockEchoContext_JSON_Call struct {
	*mock.Call
}

// JSON is a helper method to define mock.On call
//   - code int
//   - i interface{}
func (_e *MockEchoContext_Expecter) JSON(code interface{}, i interface{}) *MockEchoContext_JSON_Call {
	return &MockEchoContext_JSON_Call{Call: _e.mock.On("JSON", code, i)}
}

func (_c *MockEchoContext_JSON_Call) Run(run func(code int, i interface{})) *MockEchoContext_JSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}))
	})
	return _c
}

func (_c *MockEchoContext_JSON_Call) Return(_a0 error) *MockEchoContext_JSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_JSON_Call) RunAndReturn(run func(int, interface{}) error) *MockEchoContext_JSON_Call {
	_c.Call.Return(run)
	return _c
}

// JSONBlob provides a mock function with given fields: code, b
func (_m *MockEchoContext) JSONBlob(code int, b []byte) error {
	ret := _m.Called(code, b)

	if len(ret) == 0 {
		panic("no return value specified for JSONBlob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = rf(code, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_JSONBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONBlob'
type MockEchoContext_JSONBlob_Call struct {
	*mock.Call
}

// JSONBlob is a helper method to define mock.On call
//   - code int
//   - b []byte
func (_e *MockEchoContext_Expecter) JSONBlob(code interface{}, b interface{}) *MockEchoContext_JSONBlob_Call {
	return &MockEchoContext_JSONBlob_Call{Call: _e.mock.On("JSONBlob", code, b)}
}

func (_c *MockEchoContext_JSONBlob_Call) Run(run func(code int, b []byte)) *MockEchoContext_JSONBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]byte))
	})
	return _c
}

func (_c *MockEchoContext_JSONBlob_Call) Return(_a0 error) *MockEchoContext_JSONBlob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_JSONBlob_Call) RunAndReturn(run func(int, []byte) error) *MockEchoContext_JSONBlob_Call {
	_c.Call.Return(run)
	return _c
}

// JSONP provides a mock function with given fields: code, callback, i
func (_m *MockEchoContext) JSONP(code int, callback string, i interface{}) error {
	ret := _m.Called(code, callback, i)

	if len(ret) == 0 {
		panic("no return value specified for JSONP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, interface{}) error); ok {
		r0 = rf(code, callback, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_JSONP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONP'
type MockEchoContext_JSONP_Call struct {
	*mock.Call
}

// JSONP is a helper method to define mock.On call
//   - code int
//   - callback string
//   - i interface{}
func (_e *MockEchoContext_Expecter) JSONP(code interface{}, callback interface{}, i interface{}) *MockEchoContext_JSONP_Call {
	return &MockEchoContext_JSONP_Call{Call: _e.mock.On("JSONP", code, callback, i)}
}

func (_c *MockEchoContext_JSONP_Call) Run(run func(code int, callback string, i interface{})) *MockEchoContext_JSONP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockEchoContext_JSONP_Call) Return(_a0 error) *MockEchoContext_JSONP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_JSONP_Call) RunAndReturn(run func(int, string, interface{}) error) *MockEchoContext_JSONP_Call {
	_c.Call.Return(run)
	return _c
}

// JSONPBlob provides a mock function with given fields: code, callback, b
func (_m *MockEchoContext) JSONPBlob(code int, callback string, b []byte) error {
	ret := _m.Called(code, callback, b)

	if len(ret) == 0 {
		panic("no return value specified for JSONPBlob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, []byte) error); ok {
		r0 = rf(code, callback, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_JSONPBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONPBlob'
type MockEchoContext_JSONPBlob_Call struct {
	*mock.Call
}

// JSONPBlob is a helper method to define mock.On call
//   - code int
//   - callback string
//   - b []byte
func (_e *MockEchoContext_Expecter) JSONPBlob(code interface{}, callback interface{}, b interface{}) *MockEchoContext_JSONPBlob_Call {
	return &MockEchoContext_JSONPBlob_Call{Call: _e.mock.On("JSONPBlob", code, callback, b)}
}

func (_c *MockEchoContext_JSONPBlob_Call) Run(run func(code int, callback string, b []byte)) *MockEchoContext_JSONPBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockEchoContext_JSONPBlob_Call) Return(_a0 error) *MockEchoContext_JSONPBlob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_JSONPBlob_Call) RunAndReturn(run func(int, string, []byte) error) *MockEchoContext_JSONPBlob_Call {
	_c.Call.Return(run)
	return _c
}

// JSONPretty provides a mock function with given fields: code, i, indent
func (_m *MockEchoContext) JSONPretty(code int, i interface{}, indent string) error {
	ret := _m.Called(code, i, indent)

	if len(ret) == 0 {
		panic("no return value specified for JSONPretty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, interface{}, string) error); ok {
		r0 = rf(code, i, indent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_JSONPretty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONPretty'
type MockEchoContext_JSONPretty_Call struct {
	*mock.Call
}

// JSONPretty is a helper method to define mock.On call
//   - code int
//   - i interface{}
//   - indent string
func (_e *MockEchoContext_Expecter) JSONPretty(code interface{}, i interface{}, indent interface{}) *MockEchoContext_JSONPretty_Call {
	return &MockEchoContext_JSONPretty_Call{Call: _e.mock.On("JSONPretty", code, i, indent)}
}

func (_c *MockEchoContext_JSONPretty_Call) Run(run func(code int, i interface{}, indent string)) *MockEchoContext_JSONPretty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}), args[2].(string))
	})
	return _c
}

func (_c *MockEchoContext_JSONPretty_Call) Return(_a0 error) *MockEchoContext_JSONPretty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_JSONPretty_Call) RunAndReturn(run func(int, interface{}, string) error) *MockEchoContext_JSONPretty_Call {
	_c.Call.Return(run)
	return _c
}

// Logger provides a mock function with given fields:
func (_m *MockEchoContext) Logger() echo.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 echo.Logger
	if rf, ok := ret.Get(0).(func() echo.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.Logger)
		}
	}

	return r0
}

// MockEchoContext_Logger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logger'
type MockEchoContext_Logger_Call struct {
	*mock.Call
}

// Logger is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) Logger() *MockEchoContext_Logger_Call {
	return &MockEchoContext_Logger_Call{Call: _e.mock.On("Logger")}
}

func (_c *MockEchoContext_Logger_Call) Run(run func()) *MockEchoContext_Logger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_Logger_Call) Return(_a0 echo.Logger) *MockEchoContext_Logger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Logger_Call) RunAndReturn(run func() echo.Logger) *MockEchoContext_Logger_Call {
	_c.Call.Return(run)
	return _c
}

// MultipartForm provides a mock function with given fields:
func (_m *MockEchoContext) MultipartForm() (*multipart.Form, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MultipartForm")
	}

	var r0 *multipart.Form
	var r1 error
	if rf, ok := ret.Get(0).(func() (*multipart.Form, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *multipart.Form); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.Form)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEchoContext_MultipartForm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultipartForm'
type MockEchoContext_MultipartForm_Call struct {
	*mock.Call
}

// MultipartForm is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) MultipartForm() *MockEchoContext_MultipartForm_Call {
	return &MockEchoContext_MultipartForm_Call{Call: _e.mock.On("MultipartForm")}
}

func (_c *MockEchoContext_MultipartForm_Call) Run(run func()) *MockEchoContext_MultipartForm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_MultipartForm_Call) Return(_a0 *multipart.Form, _a1 error) *MockEchoContext_MultipartForm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEchoContext_MultipartForm_Call) RunAndReturn(run func() (*multipart.Form, error)) *MockEchoContext_MultipartForm_Call {
	_c.Call.Return(run)
	return _c
}

// NoContent provides a mock function with given fields: code
func (_m *MockEchoContext) NoContent(code int) error {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for NoContent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_NoContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoContent'
type MockEchoContext_NoContent_Call struct {
	*mock.Call
}

// NoContent is a helper method to define mock.On call
//   - code int
func (_e *MockEchoContext_Expecter) NoContent(code interface{}) *MockEchoContext_NoContent_Call {
	return &MockEchoContext_NoContent_Call{Call: _e.mock.On("NoContent", code)}
}

func (_c *MockEchoContext_NoContent_Call) Run(run func(code int)) *MockEchoContext_NoContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockEchoContext_NoContent_Call) Return(_a0 error) *MockEchoContext_NoContent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_NoContent_Call) RunAndReturn(run func(int) error) *MockEchoContext_NoContent_Call {
	_c.Call.Return(run)
	return _c
}

// Param provides a mock function with given fields: name
func (_m *MockEchoContext) Param(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Param")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEchoContext_Param_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Param'
type MockEchoContext_Param_Call struct {
	*mock.Call
}

// Param is a helper method to define mock.On call
//   - name string
func (_e *MockEchoContext_Expecter) Param(name interface{}) *MockEchoContext_Param_Call {
	return &MockEchoContext_Param_Call{Call: _e.mock.On("Param", name)}
}

func (_c *MockEchoContext_Param_Call) Run(run func(name string)) *MockEchoContext_Param_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEchoContext_Param_Call) Return(_a0 string) *MockEchoContext_Param_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Param_Call) RunAndReturn(run func(string) string) *MockEchoContext_Param_Call {
	_c.Call.Return(run)
	return _c
}

// ParamNames provides a mock function with given fields:
func (_m *MockEchoContext) ParamNames() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParamNames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockEchoContext_ParamNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParamNames'
type MockEchoContext_ParamNames_Call struct {
	*mock.Call
}

// ParamNames is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) ParamNames() *MockEchoContext_ParamNames_Call {
	return &MockEchoContext_ParamNames_Call{Call: _e.mock.On("ParamNames")}
}

func (_c *MockEchoContext_ParamNames_Call) Run(run func()) *MockEchoContext_ParamNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_ParamNames_Call) Return(_a0 []string) *MockEchoContext_ParamNames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_ParamNames_Call) RunAndReturn(run func() []string) *MockEchoContext_ParamNames_Call {
	_c.Call.Return(run)
	return _c
}

// ParamValues provides a mock function with given fields:
func (_m *MockEchoContext) ParamValues() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParamValues")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockEchoContext_ParamValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParamValues'
type MockEchoContext_ParamValues_Call struct {
	*mock.Call
}

// ParamValues is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) ParamValues() *MockEchoContext_ParamValues_Call {
	return &MockEchoContext_ParamValues_Call{Call: _e.mock.On("ParamValues")}
}

func (_c *MockEchoContext_ParamValues_Call) Run(run func()) *MockEchoContext_ParamValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_ParamValues_Call) Return(_a0 []string) *MockEchoContext_ParamValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_ParamValues_Call) RunAndReturn(run func() []string) *MockEchoContext_ParamValues_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with given fields:
func (_m *MockEchoContext) Path() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEchoContext_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type MockEchoContext_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) Path() *MockEchoContext_Path_Call {
	return &MockEchoContext_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *MockEchoContext_Path_Call) Run(run func()) *MockEchoContext_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_Path_Call) Return(_a0 string) *MockEchoContext_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Path_Call) RunAndReturn(run func() string) *MockEchoContext_Path_Call {
	_c.Call.Return(run)
	return _c
}

// QueryParam provides a mock function with given fields: name
func (_m *MockEchoContext) QueryParam(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for QueryParam")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEchoContext_QueryParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryParam'
type MockEchoContext_QueryParam_Call struct {
	*mock.Call
}

// QueryParam is a helper method to define mock.On call
//   - name string
func (_e *MockEchoContext_Expecter) QueryParam(name interface{}) *MockEchoContext_QueryParam_Call {
	return &MockEchoContext_QueryParam_Call{Call: _e.mock.On("QueryParam", name)}
}

func (_c *MockEchoContext_QueryParam_Call) Run(run func(name string)) *MockEchoContext_QueryParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEchoContext_QueryParam_Call) Return(_a0 string) *MockEchoContext_QueryParam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_QueryParam_Call) RunAndReturn(run func(string) string) *MockEchoContext_QueryParam_Call {
	_c.Call.Return(run)
	return _c
}

// QueryParams provides a mock function with given fields:
func (_m *MockEchoContext) QueryParams() url.Values {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueryParams")
	}

	var r0 url.Values
	if rf, ok := ret.Get(0).(func() url.Values); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(url.Values)
		}
	}

	return r0
}

// MockEchoContext_QueryParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryParams'
type MockEchoContext_QueryParams_Call struct {
	*mock.Call
}

// QueryParams is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) QueryParams() *MockEchoContext_QueryParams_Call {
	return &MockEchoContext_QueryParams_Call{Call: _e.mock.On("QueryParams")}
}

func (_c *MockEchoContext_QueryParams_Call) Run(run func()) *MockEchoContext_QueryParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_QueryParams_Call) Return(_a0 url.Values) *MockEchoContext_QueryParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_QueryParams_Call) RunAndReturn(run func() url.Values) *MockEchoContext_QueryParams_Call {
	_c.Call.Return(run)
	return _c
}

// QueryString provides a mock function with given fields:
func (_m *MockEchoContext) QueryString() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueryString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEchoContext_QueryString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryString'
type MockEchoContext_QueryString_Call struct {
	*mock.Call
}

// QueryString is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) QueryString() *MockEchoContext_QueryString_Call {
	return &MockEchoContext_QueryString_Call{Call: _e.mock.On("QueryString")}
}

func (_c *MockEchoContext_QueryString_Call) Run(run func()) *MockEchoContext_QueryString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_QueryString_Call) Return(_a0 string) *MockEchoContext_QueryString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_QueryString_Call) RunAndReturn(run func() string) *MockEchoContext_QueryString_Call {
	_c.Call.Return(run)
	return _c
}

// RealIP provides a mock function with given fields:
func (_m *MockEchoContext) RealIP() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RealIP")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEchoContext_RealIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RealIP'
type MockEchoContext_RealIP_Call struct {
	*mock.Call
}

// RealIP is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) RealIP() *MockEchoContext_RealIP_Call {
	return &MockEchoContext_RealIP_Call{Call: _e.mock.On("RealIP")}
}

func (_c *MockEchoContext_RealIP_Call) Run(run func()) *MockEchoContext_RealIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_RealIP_Call) Return(_a0 string) *MockEchoContext_RealIP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_RealIP_Call) RunAndReturn(run func() string) *MockEchoContext_RealIP_Call {
	_c.Call.Return(run)
	return _c
}

// Redirect provides a mock function with given fields: code, _a1
func (_m *MockEchoContext) Redirect(code int, _a1 string) error {
	ret := _m.Called(code, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Redirect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(code, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_Redirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Redirect'
type MockEchoContext_Redirect_Call struct {
	*mock.Call
}

// Redirect is a helper method to define mock.On call
//   - code int
//   - _a1 string
func (_e *MockEchoContext_Expecter) Redirect(code interface{}, _a1 interface{}) *MockEchoContext_Redirect_Call {
	return &MockEchoContext_Redirect_Call{Call: _e.mock.On("Redirect", code, _a1)}
}

func (_c *MockEchoContext_Redirect_Call) Run(run func(code int, _a1 string)) *MockEchoContext_Redirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockEchoContext_Redirect_Call) Return(_a0 error) *MockEchoContext_Redirect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Redirect_Call) RunAndReturn(run func(int, string) error) *MockEchoContext_Redirect_Call {
	_c.Call.Return(run)
	return _c
}

// Render provides a mock function with given fields: code, name, data
func (_m *MockEchoContext) Render(code int, name string, data interface{}) error {
	ret := _m.Called(code, name, data)

	if len(ret) == 0 {
		panic("no return value specified for Render")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, interface{}) error); ok {
		r0 = rf(code, name, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type MockEchoContext_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - code int
//   - name string
//   - data interface{}
func (_e *MockEchoContext_Expecter) Render(code interface{}, name interface{}, data interface{}) *MockEchoContext_Render_Call {
	return &MockEchoContext_Render_Call{Call: _e.mock.On("Render", code, name, data)}
}

func (_c *MockEchoContext_Render_Call) Run(run func(code int, name string, data interface{})) *MockEchoContext_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockEchoContext_Render_Call) Return(_a0 error) *MockEchoContext_Render_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Render_Call) RunAndReturn(run func(int, string, interface{}) error) *MockEchoContext_Render_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields:
func (_m *MockEchoContext) Request() *http.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func() *http.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	return r0
}

// MockEchoContext_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type MockEchoContext_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) Request() *MockEchoContext_Request_Call {
	return &MockEchoContext_Request_Call{Call: _e.mock.On("Request")}
}

func (_c *MockEchoContext_Request_Call) Run(run func()) *MockEchoContext_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_Request_Call) Return(_a0 *http.Request) *MockEchoContext_Request_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Request_Call) RunAndReturn(run func() *http.Request) *MockEchoContext_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields: r, w
func (_m *MockEchoContext) Reset(r *http.Request, w http.ResponseWriter) {
	_m.Called(r, w)
}

// MockEchoContext_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockEchoContext_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
//   - r *http.Request
//   - w http.ResponseWriter
func (_e *MockEchoContext_Expecter) Reset(r interface{}, w interface{}) *MockEchoContext_Reset_Call {
	return &MockEchoContext_Reset_Call{Call: _e.mock.On("Reset", r, w)}
}

func (_c *MockEchoContext_Reset_Call) Run(run func(r *http.Request, w http.ResponseWriter)) *MockEchoContext_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockEchoContext_Reset_Call) Return() *MockEchoContext_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoContext_Reset_Call) RunAndReturn(run func(*http.Request, http.ResponseWriter)) *MockEchoContext_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// Response provides a mock function with given fields:
func (_m *MockEchoContext) Response() *echo.Response {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Response")
	}

	var r0 *echo.Response
	if rf, ok := ret.Get(0).(func() *echo.Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Response)
		}
	}

	return r0
}

// MockEchoContext_Response_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Response'
type MockEchoContext_Response_Call struct {
	*mock.Call
}

// Response is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) Response() *MockEchoContext_Response_Call {
	return &MockEchoContext_Response_Call{Call: _e.mock.On("Response")}
}

func (_c *MockEchoContext_Response_Call) Run(run func()) *MockEchoContext_Response_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_Response_Call) Return(_a0 *echo.Response) *MockEchoContext_Response_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Response_Call) RunAndReturn(run func() *echo.Response) *MockEchoContext_Response_Call {
	_c.Call.Return(run)
	return _c
}

// Scheme provides a mock function with given fields:
func (_m *MockEchoContext) Scheme() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scheme")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEchoContext_Scheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scheme'
type MockEchoContext_Scheme_Call struct {
	*mock.Call
}

// Scheme is a helper method to define mock.On call
func (_e *MockEchoContext_Expecter) Scheme() *MockEchoContext_Scheme_Call {
	return &MockEchoContext_Scheme_Call{Call: _e.mock.On("Scheme")}
}

func (_c *MockEchoContext_Scheme_Call) Run(run func()) *MockEchoContext_Scheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEchoContext_Scheme_Call) Return(_a0 string) *MockEchoContext_Scheme_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Scheme_Call) RunAndReturn(run func() string) *MockEchoContext_Scheme_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, val
func (_m *MockEchoContext) Set(key string, val interface{}) {
	_m.Called(key, val)
}

// MockEchoContext_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockEchoContext_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - val interface{}
func (_e *MockEchoContext_Expecter) Set(key interface{}, val interface{}) *MockEchoContext_Set_Call {
	return &MockEchoContext_Set_Call{Call: _e.mock.On("Set", key, val)}
}

func (_c *MockEchoContext_Set_Call) Run(run func(key string, val interface{})) *MockEchoContext_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockEchoContext_Set_Call) Return() *MockEchoContext_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoContext_Set_Call) RunAndReturn(run func(string, interface{})) *MockEchoContext_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetCookie provides a mock function with given fields: cookie
func (_m *MockEchoContext) SetCookie(cookie *http.Cookie) {
	_m.Called(cookie)
}

// MockEchoContext_SetCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCookie'
type MockEchoContext_SetCookie_Call struct {
	*mock.Call
}

// SetCookie is a helper method to define mock.On call
//   - cookie *http.Cookie
func (_e *MockEchoContext_Expecter) SetCookie(cookie interface{}) *MockEchoContext_SetCookie_Call {
	return &MockEchoContext_SetCookie_Call{Call: _e.mock.On("SetCookie", cookie)}
}

func (_c *MockEchoContext_SetCookie_Call) Run(run func(cookie *http.Cookie)) *MockEchoContext_SetCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Cookie))
	})
	return _c
}

func (_c *MockEchoContext_SetCookie_Call) Return() *MockEchoContext_SetCookie_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoContext_SetCookie_Call) RunAndReturn(run func(*http.Cookie)) *MockEchoContext_SetCookie_Call {
	_c.Call.Return(run)
	return _c
}

// SetHandler provides a mock function with given fields: h
func (_m *MockEchoContext) SetHandler(h echo.HandlerFunc) {
	_m.Called(h)
}

// MockEchoContext_SetHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHandler'
type MockEchoContext_SetHandler_Call struct {
	*mock.Call
}

// SetHandler is a helper method to define mock.On call
//   - h echo.HandlerFunc
func (_e *MockEchoContext_Expecter) SetHandler(h interface{}) *MockEchoContext_SetHandler_Call {
	return &MockEchoContext_SetHandler_Call{Call: _e.mock.On("SetHandler", h)}
}

func (_c *MockEchoContext_SetHandler_Call) Run(run func(h echo.HandlerFunc)) *MockEchoContext_SetHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.HandlerFunc))
	})
	return _c
}

func (_c *MockEchoContext_SetHandler_Call) Return() *MockEchoContext_SetHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoContext_SetHandler_Call) RunAndReturn(run func(echo.HandlerFunc)) *MockEchoContext_SetHandler_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogger provides a mock function with given fields: l
func (_m *MockEchoContext) SetLogger(l echo.Logger) {
	_m.Called(l)
}

// MockEchoContext_SetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogger'
type MockEchoContext_SetLogger_Call struct {
	*mock.Call
}

// SetLogger is a helper method to define mock.On call
//   - l echo.Logger
func (_e *MockEchoContext_Expecter) SetLogger(l interface{}) *MockEchoContext_SetLogger_Call {
	return &MockEchoContext_SetLogger_Call{Call: _e.mock.On("SetLogger", l)}
}

func (_c *MockEchoContext_SetLogger_Call) Run(run func(l echo.Logger)) *MockEchoContext_SetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Logger))
	})
	return _c
}

func (_c *MockEchoContext_SetLogger_Call) Return() *MockEchoContext_SetLogger_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoContext_SetLogger_Call) RunAndReturn(run func(echo.Logger)) *MockEchoContext_SetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// SetParamNames provides a mock function with given fields: names
func (_m *MockEchoContext) SetParamNames(names ...string) {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockEchoContext_SetParamNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParamNames'
type MockEchoContext_SetParamNames_Call struct {
	*mock.Call
}

// SetParamNames is a helper method to define mock.On call
//   - names ...string
func (_e *MockEchoContext_Expecter) SetParamNames(names ...interface{}) *MockEchoContext_SetParamNames_Call {
	return &MockEchoContext_SetParamNames_Call{Call: _e.mock.On("SetParamNames",
		append([]interface{}{}, names...)...)}
}

func (_c *MockEchoContext_SetParamNames_Call) Run(run func(names ...string)) *MockEchoContext_SetParamNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEchoContext_SetParamNames_Call) Return() *MockEchoContext_SetParamNames_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoContext_SetParamNames_Call) RunAndReturn(run func(...string)) *MockEchoContext_SetParamNames_Call {
	_c.Call.Return(run)
	return _c
}

// SetParamValues provides a mock function with given fields: values
func (_m *MockEchoContext) SetParamValues(values ...string) {
	_va := make([]interface{}, len(values))
	for _i := range values {
		_va[_i] = values[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockEchoContext_SetParamValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParamValues'
type MockEchoContext_SetParamValues_Call struct {
	*mock.Call
}

// SetParamValues is a helper method to define mock.On call
//   - values ...string
func (_e *MockEchoContext_Expecter) SetParamValues(values ...interface{}) *MockEchoContext_SetParamValues_Call {
	return &MockEchoContext_SetParamValues_Call{Call: _e.mock.On("SetParamValues",
		append([]interface{}{}, values...)...)}
}

func (_c *MockEchoContext_SetParamValues_Call) Run(run func(values ...string)) *MockEchoContext_SetParamValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockEchoContext_SetParamValues_Call) Return() *MockEchoContext_SetParamValues_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoContext_SetParamValues_Call) RunAndReturn(run func(...string)) *MockEchoContext_SetParamValues_Call {
	_c.Call.Return(run)
	return _c
}

// SetPath provides a mock function with given fields: p
func (_m *MockEchoContext) SetPath(p string) {
	_m.Called(p)
}

// MockEchoContext_SetPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPath'
type MockEchoContext_SetPath_Call struct {
	*mock.Call
}

// SetPath is a helper method to define mock.On call
//   - p string
func (_e *MockEchoContext_Expecter) SetPath(p interface{}) *MockEchoContext_SetPath_Call {
	return &MockEchoContext_SetPath_Call{Call: _e.mock.On("SetPath", p)}
}

func (_c *MockEchoContext_SetPath_Call) Run(run func(p string)) *MockEchoContext_SetPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEchoContext_SetPath_Call) Return() *MockEchoContext_SetPath_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoContext_SetPath_Call) RunAndReturn(run func(string)) *MockEchoContext_SetPath_Call {
	_c.Call.Return(run)
	return _c
}

// SetRequest provides a mock function with given fields: r
func (_m *MockEchoContext) SetRequest(r *http.Request) {
	_m.Called(r)
}

// MockEchoContext_SetRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRequest'
type MockEchoContext_SetRequest_Call struct {
	*mock.Call
}

// SetRequest is a helper method to define mock.On call
//   - r *http.Request
func (_e *MockEchoContext_Expecter) SetRequest(r interface{}) *MockEchoContext_SetRequest_Call {
	return &MockEchoContext_SetRequest_Call{Call: _e.mock.On("SetRequest", r)}
}

func (_c *MockEchoContext_SetRequest_Call) Run(run func(r *http.Request)) *MockEchoContext_SetRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockEchoContext_SetRequest_Call) Return() *MockEchoContext_SetRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoContext_SetRequest_Call) RunAndReturn(run func(*http.Request)) *MockEchoContext_SetRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SetResponse provides a mock function with given fields: r
func (_m *MockEchoContext) SetResponse(r *echo.Response) {
	_m.Called(r)
}

// MockEchoContext_SetResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetResponse'
type MockEchoContext_SetResponse_Call struct {
	*mock.Call
}

// SetResponse is a helper method to define mock.On call
//   - r *echo.Response
func (_e *MockEchoContext_Expecter) SetResponse(r interface{}) *MockEchoContext_SetResponse_Call {
	return &MockEchoContext_SetResponse_Call{Call: _e.mock.On("SetResponse", r)}
}

func (_c *MockEchoContext_SetResponse_Call) Run(run func(r *echo.Response)) *MockEchoContext_SetResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*echo.Response))
	})
	return _c
}

func (_c *MockEchoContext_SetResponse_Call) Return() *MockEchoContext_SetResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEchoContext_SetResponse_Call) RunAndReturn(run func(*echo.Response)) *MockEchoContext_SetResponse_Call {
	_c.Call.Return(run)
	return _c
}

// Stream provides a mock function with given fields: code, contentType, r
func (_m *MockEchoContext) Stream(code int, contentType string, r io.Reader) error {
	ret := _m.Called(code, contentType, r)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, io.Reader) error); ok {
		r0 = rf(code, contentType, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type MockEchoContext_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - code int
//   - contentType string
//   - r io.Reader
func (_e *MockEchoContext_Expecter) Stream(code interface{}, contentType interface{}, r interface{}) *MockEchoContext_Stream_Call {
	return &MockEchoContext_Stream_Call{Call: _e.mock.On("Stream", code, contentType, r)}
}

func (_c *MockEchoContext_Stream_Call) Run(run func(code int, contentType string, r io.Reader)) *MockEchoContext_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *MockEchoContext_Stream_Call) Return(_a0 error) *MockEchoContext_Stream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Stream_Call) RunAndReturn(run func(int, string, io.Reader) error) *MockEchoContext_Stream_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields: code, s
func (_m *MockEchoContext) String(code int, s string) error {
	ret := _m.Called(code, s)

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(code, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockEchoContext_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
//   - code int
//   - s string
func (_e *MockEchoContext_Expecter) String(code interface{}, s interface{}) *MockEchoContext_String_Call {
	return &MockEchoContext_String_Call{Call: _e.mock.On("String", code, s)}
}

func (_c *MockEchoContext_String_Call) Run(run func(code int, s string)) *MockEchoContext_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockEchoContext_String_Call) Return(_a0 error) *MockEchoContext_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_String_Call) RunAndReturn(run func(int, string) error) *MockEchoContext_String_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: i
func (_m *MockEchoContext) Validate(i interface{}) error {
	ret := _m.Called(i)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockEchoContext_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - i interface{}
func (_e *MockEchoContext_Expecter) Validate(i interface{}) *MockEchoContext_Validate_Call {
	return &MockEchoContext_Validate_Call{Call: _e.mock.On("Validate", i)}
}

func (_c *MockEchoContext_Validate_Call) Run(run func(i interface{})) *MockEchoContext_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockEchoContext_Validate_Call) Return(_a0 error) *MockEchoContext_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_Validate_Call) RunAndReturn(run func(interface{}) error) *MockEchoContext_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// XML provides a mock function with given fields: code, i
func (_m *MockEchoContext) XML(code int, i interface{}) error {
	ret := _m.Called(code, i)

	if len(ret) == 0 {
		panic("no return value specified for XML")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, interface{}) error); ok {
		r0 = rf(code, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_XML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XML'
type MockEchoContext_XML_Call struct {
	*mock.Call
}

// XML is a helper method to define mock.On call
//   - code int
//   - i interface{}
func (_e *MockEchoContext_Expecter) XML(code interface{}, i interface{}) *MockEchoContext_XML_Call {
	return &MockEchoContext_XML_Call{Call: _e.mock.On("XML", code, i)}
}

func (_c *MockEchoContext_XML_Call) Run(run func(code int, i interface{})) *MockEchoContext_XML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}))
	})
	return _c
}

func (_c *MockEchoContext_XML_Call) Return(_a0 error) *MockEchoContext_XML_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_XML_Call) RunAndReturn(run func(int, interface{}) error) *MockEchoContext_XML_Call {
	_c.Call.Return(run)
	return _c
}

// XMLBlob provides a mock function with given fields: code, b
func (_m *MockEchoContext) XMLBlob(code int, b []byte) error {
	ret := _m.Called(code, b)

	if len(ret) == 0 {
		panic("no return value specified for XMLBlob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = rf(code, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_XMLBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XMLBlob'
type MockEchoContext_XMLBlob_Call struct {
	*mock.Call
}

// XMLBlob is a helper method to define mock.On call
//   - code int
//   - b []byte
func (_e *MockEchoContext_Expecter) XMLBlob(code interface{}, b interface{}) *MockEchoContext_XMLBlob_Call {
	return &MockEchoContext_XMLBlob_Call{Call: _e.mock.On("XMLBlob", code, b)}
}

func (_c *MockEchoContext_XMLBlob_Call) Run(run func(code int, b []byte)) *MockEchoContext_XMLBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]byte))
	})
	return _c
}

func (_c *MockEchoContext_XMLBlob_Call) Return(_a0 error) *MockEchoContext_XMLBlob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_XMLBlob_Call) RunAndReturn(run func(int, []byte) error) *MockEchoContext_XMLBlob_Call {
	_c.Call.Return(run)
	return _c
}

// XMLPretty provides a mock function with given fields: code, i, indent
func (_m *MockEchoContext) XMLPretty(code int, i interface{}, indent string) error {
	ret := _m.Called(code, i, indent)

	if len(ret) == 0 {
		panic("no return value specified for XMLPretty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, interface{}, string) error); ok {
		r0 = rf(code, i, indent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEchoContext_XMLPretty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XMLPretty'
type MockEchoContext_XMLPretty_Call struct {
	*mock.Call
}

// XMLPretty is a helper method to define mock.On call
//   - code int
//   - i interface{}
//   - indent string
func (_e *MockEchoContext_Expecter) XMLPretty(code interface{}, i interface{}, indent interface{}) *MockEchoContext_XMLPretty_Call {
	return &MockEchoContext_XMLPretty_Call{Call: _e.mock.On("XMLPretty", code, i, indent)}
}

func (_c *MockEchoContext_XMLPretty_Call) Run(run func(code int, i interface{}, indent string)) *MockEchoContext_XMLPretty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}), args[2].(string))
	})
	return _c
}

func (_c *MockEchoContext_XMLPretty_Call) Return(_a0 error) *MockEchoContext_XMLPretty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoContext_XMLPretty_Call) RunAndReturn(run func(int, interface{}, string) error) *MockEchoContext_XMLPretty_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEchoContext creates a new instance of MockEchoContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEchoContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEchoContext {
	mock := &MockEchoContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
