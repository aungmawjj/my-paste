name: CI/CD

on:
  push:
    branches: 
      - master

jobs:
  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    env:
      DOMAIN: ${{ vars.DOMAIN }}
      GOOGLE_CLIENT_ID: "${{ vars.GOOGLE_CLIENT_ID }}"
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/mypaste
          tags: type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Write SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.DOMAIN }} > ~/.ssh/known_hosts

      - name: Deploy image
        env:
          IMAGE: "${{ steps.meta.outputs.tags }}"
        run: |
          echo ${{ env.IMAGE }}
          ssh root@${{ env.DOMAIN }} "
            cd /opt/mypaste
            podman pull ${{ env.IMAGE }}
            podman stop mypaste
            podman rm mypaste
            echo '
              GOOGLE_CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }}
              JWT_SIGN_KEY=${{ secrets.JWT_SIGN_KEY }}
              REDIS_URL=redis://127.0.0.1:6379
              ENABLE_AUTO_TLS=1
              TLS_DOMAIN=${{ env.DOMAIN }}
              TLS_CACHE_DIR=/var/www/cache
              LOGIN_CALLBACK_URI=https://${{ env.DOMAIN }}/login-callback
              SERVE_ADDR=:443
            ' > .env
            podman run --name mypaste \
              --env-file .env \
              --volume ./tls-cache:/var/www/cache \
              --restart always \
              --oom-kill-disable \
              -p 80:80 -p 443:443 \
              --net host \
              -d ${{ env.IMAGE }}
            podman image prune -af
          "
